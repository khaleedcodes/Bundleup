I’m working in a React + TypeScript project using Tailwind CSS for styling and Framer Motion for animations.
I don’t use plain CSS.

Below, I’ll show you an example component that already has the kind of animation I want, and then I’ll give you one or more components that I want you to help modify to use similar animations.

✅ Use only Framer Motion and Tailwind.
✅ Keep it clean, minimal, and consistent with the example.
✅ All animations should be declarative (use motion components, variants, etc.).
✅ Preserve the existing logic and structure of the components; just enhance them with smooth enter/exit and hover animations.

Here’s the example of what I’m aiming for:

import { useState, useRef, useEffect } from "react";
import { motion, useMotionValue, useTransform, useSpring } from "framer-motion";
import defaultAvatar from "../../../assets/images/default-avatar.jpeg";

// All data in a single file as requested
const demoBundle = {
  displayName: "Kai Moreno",
  bundleName: "kaimoreno",
  profilePicture: defaultAvatar,
  bio: "Freelance developer & indie hacker. Building cool stuff on the internet.",
  bits: [
    {
      title: "My Projects",
      url: "#",
    },
    {
      title: "GitHub",
      url: "#",
    },
    {
      title: "YouTube Channel",
      url: "#",
    },
    {
      title: "X (Twitter)",
      url: "#",
    },
  ],
};

function DemoDefaultTheme() {
  const [isHovering, setIsHovering] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  
  // Motion values for x and y rotation
  const rotateX = useMotionValue(0);
  const rotateY = useMotionValue(0);
  
  // Motion values for idle animation
  const idleY = useMotionValue(0);
  const idleRotate = useMotionValue(0);
  const idleScale = useMotionValue(1);

  // Apply spring physics for smooth animation
  const springConfig = { damping: 20, stiffness: 300 };
  const springRotateX = useSpring(rotateX, springConfig);
  const springRotateY = useSpring(rotateY, springConfig);
  const springIdleY = useSpring(idleY, { damping: 15, stiffness: 100 });
  const springIdleRotate = useSpring(idleRotate, { damping: 15, stiffness: 100 });
  const springIdleScale = useSpring(idleScale, { damping: 15, stiffness: 100 });

  // Parameters for the 3D effect
  const perspective = 1000;
  const maxTilt = 15;
  const scale = 1.02;

  // Transform values for the card when hovering
  const hoverTransform = useTransform(
    [springRotateX, springRotateY],
    ([latestRotateX, latestRotateY]) => 
      `perspective(${perspective}px) rotateX(${latestRotateX}deg) rotateY(${latestRotateY}deg) scale(${isHovering ? scale : 1})`
  );

  // Transform values for idle animation when not hovering
  const idleTransform = useTransform(
    [springIdleY, springIdleRotate, springIdleScale],
    ([y, rotate, scale]) => 
      `perspective(${perspective}px) translateY(${y}px) rotate(${rotate}deg) scale(${scale})`
  );

  // Combined transform - use hover transform when hovering, otherwise use idle animation
  const combinedTransform = useTransform(
    () => isHovering ? hoverTransform.get() : idleTransform.get()
  );

  // Idle animation
  useEffect(() => {
    if (!isHovering) {
      // Start looping idle animations
      const idleAnimationInterval = setInterval(() => {
        // Subtle vertical bobbing
        idleY.set(Math.sin(Date.now() / 1000) * 5);
        
        // Very subtle rotation
        idleRotate.set(Math.sin(Date.now() / 1500) * 1);
        
        // Subtle scale pulsing
        idleScale.set(1 + Math.sin(Date.now() / 2000) * 0.01);
      }, 50);

      return () => clearInterval(idleAnimationInterval);
    }
  }, [isHovering]);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current || !isHovering) return;
    
    const bounds = containerRef.current.getBoundingClientRect();
    
    // Calculate mouse position relative to card center
    const mouseX = e.clientX - bounds.left - bounds.width / 2;
    const mouseY = e.clientY - bounds.top - bounds.height / 2;
    
    // Calculate rotation values based on mouse position
    const rotateYValue = (mouseX / bounds.width) * maxTilt * 2;
    const rotateXValue = -((mouseY / bounds.height) * maxTilt * 2);
    
    rotateX.set(rotateXValue);
    rotateY.set(rotateYValue);
  };

  const handleMouseEnter = () => {
    setIsHovering(true);
  };

  const handleMouseLeave = () => {
    setIsHovering(false);
    rotateX.set(0);
    rotateY.set(0);
  };

  return (
    <div className="min-h-[75vh] flex items-center justify-center text-white font-['Inter',system-ui,sans-serif]">
      <div 
        ref={containerRef}
        className="w-full max-w-[370px] mx-auto"
        onMouseMove={handleMouseMove}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <motion.div
          style={{ transform: combinedTransform }}
          className="will-change-transform"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, ease: "easeOut" }}
        >
          <div className="bg-gradient-to-b from-[#1a1a1d]/80 to-[#1a1a1d] backdrop-blur-sm rounded-3xl p-8 shadow-xl border border-gray-800/80 relative overflow-hidden">
            {/* Animated background blobs */}
            <motion.div 
              className="absolute -top-24 -right-24 w-48 h-48 bg-indigo-600/20 rounded-full blur-3xl"
              animate={{
                opacity: [0.2, 0.3, 0.2],
                scale: [1, 1.05, 1],
              }}
              transition={{
                duration: 8,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            ></motion.div>
            <motion.div 
              className="absolute -bottom-24 -left-24 w-48 h-48 bg-purple-600/20 rounded-full blur-3xl"
              animate={{
                opacity: [0.2, 0.3, 0.2],
                scale: [1, 1.05, 1],
              }}
              transition={{
                duration: 8,
                repeat: Infinity,
                ease: "easeInOut",
                delay: 2
              }}
            ></motion.div>

            <div className="relative flex flex-col items-center text-center z-10">
              {/* Profile image with animated gradient border */}
              <motion.div 
                className="group relative"
                whileHover={{ scale: 1.05 }}
                transition={{ type: "spring", stiffness: 400, damping: 10 }}
              >
                <img
                  src={demoBundle.profilePicture}
                  alt={demoBundle.displayName}
                  className="w-28 h-28 rounded-full object-cover shadow-lg border-2 border-indigo-500/70 p-[2px] bg-[#0f0f11] z-10 relative"
                />
                <motion.div 
                  className="absolute inset-0 rounded-full bg-gradient-to-br from-indigo-400 via-indigo-500 to-purple-600 blur-[2px] opacity-70 group-hover:opacity-100"
                  animate={{
                    rotate: [0, 360],
                  }}
                  transition={{
                    duration: 20,
                    repeat: Infinity,
                    ease: "linear"
                  }}
                ></motion.div>
              </motion.div>

              {/* Name and bio with staggered fade-in */}
              <motion.h1 
                className="mt-5 text-3xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300"
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
              >
                {demoBundle.displayName}
              </motion.h1>
              <motion.p 
                className="text-indigo-400 text-sm font-medium"
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
              >
                @{demoBundle.bundleName}
              </motion.p>
              {demoBundle.bio && (
                <motion.p 
                  className="mt-3 text-gray-400 text-sm max-w-xs"
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                >
                  {demoBundle.bio}
                </motion.p>
              )}
            </div>

            {/* Links with staggered animation */}
            <motion.div 
              className="mt-8 space-y-3"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.5 }}
            >
              {demoBundle.bits.map((bit, index) => (
                <motion.a
                  key={index}
                  href={bit.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="group flex items-center gap-3 w-full px-6 py-4 rounded-xl bg-[#0f0f11]/80 border border-gray-800/50 hover:border-indigo-500/50 hover:bg-gradient-to-r hover:from-indigo-600/20 hover:to-purple-600/20 transition-all duration-300 text-white font-medium shadow-md hover:shadow-lg hover:shadow-indigo-500/10 transform hover:-translate-y-0.5"
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 * index + 0.5 }}
                  whileHover={{ y: -2 }}
                >
                  <span className="group-hover:text-indigo-100 transition-colors">
                    {bit.title}
                  </span>

                  <motion.svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-4 w-4 ml-auto text-gray-500 group-hover:text-indigo-400 transition-all"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    initial={{ x: 0 }}
                    whileHover={{ x: 3 }}
                    transition={{ type: "spring", stiffness: 400, damping: 10 }}
                  >
                    <path
                      fillRule="evenodd"
                      d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </motion.svg>
                </motion.a>
              ))}
            </motion.div>

            {/* Footer */}
            <motion.div 
              className="mt-10 flex justify-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.8 }}
            >
              <span className="text-xs text-gray-600 hover:text-gray-400 transition-colors">
                Created with{" "}
                <a
                  href="https://bundlebit.me/"
                  className="text-indigo-400 hover:text-indigo-300 transition-colors"
                >
                  Bundlebit
                </a>
              </span>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}

export default DemoDefaultTheme;

Now here are the components I want you to animate similarly (make sure each component is contained in one file like the example, also do not change the visual design of the component all i want is the same animations as the example):
import defaultAvatar from "../../../assets/images/default-avatar.jpeg";

const demoBundle = {
  displayName: "Lena Ray",
  bundleName: "lenaray",
  profilePicture: defaultAvatar,
  bio: "Designer. Dreamer. Building beautiful things for the web.",
  bits: [
    {
      title: "Portfolio Website",
      url: "https://lena.design",
      icon: "💼",
      order: 1,
      isPinned: true,
    },
    {
      title: "Dribbble Shots",
      url: "https://dribbble.com/lenaray",
      icon: "🎨",
      order: 2,
      isPinned: false,
    },
    {
      title: "LinkedIn Profile",
      url: "https://linkedin.com/in/lenaray",
      icon: "🔗",
      order: 3,
      isPinned: false,
    },
    {
      title: "Instagram",
      url: "https://instagram.com/lenaray",
      icon: "📸",
      order: 4,
      isPinned: false,
    },
  ],
};

function DemoBrutalistTheme() {
  const sortedBits = [...demoBundle.bits]
    .sort((a, b) => a.order - b.order)
    .sort((a, b) => Number(b.isPinned) - Number(a.isPinned));

  return (
    <div className="min-h-screen flex items-center justify-center px-4 py-12 md:py-16 bg-white text-black font-mono">
      <div className="w-full max-w-md mx-auto">
        <div className="border-4 border-black bg-white p-8 shadow-[8px_8px_0px_0px_rgba(0,0,0,1)]">
          <div className="flex flex-col items-center border-b-4 border-black pb-6 mb-6">
            <div className="border-4 border-black p-1 mb-4 shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]">
              <img
                src={demoBundle.profilePicture || defaultAvatar}
                alt={demoBundle.displayName}
                className="w-28 h-28 object-cover"
              />
            </div>

            <h1 className="text-3xl font-bold uppercase tracking-tight mt-2">
              {demoBundle.displayName}
            </h1>

            <div className="bg-black text-white px-2 py-0.5 mt-1 tracking-wide">
              @{demoBundle.bundleName}
            </div>

            {demoBundle.bio && (
              <p className="mt-3 text-sm max-w-xs font-mono uppercase text-center">
                {demoBundle.bio}
              </p>
            )}
          </div>

          <div className="space-y-4">
            {sortedBits.map((bit, index) => (
              <a
                key={index}
                href={bit.url}
                target="_blank"
                rel="noopener noreferrer"
                className="group flex items-center gap-3 w-full px-4 py-3 bg-white border-4 border-black shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:translate-x-[3px] hover:translate-y-[3px] hover:shadow-none transition-all duration-150 text-black font-bold uppercase"
              >
                {bit.icon && <span className="text-xl">{bit.icon}</span>}
                <span>{bit.title}</span>

                <span className="ml-auto font-bold text-xl transition-transform">
                  →
                </span>
              </a>
            ))}
          </div>

          <div className="mt-8 flex justify-center">
            <div className="border-t-4 border-black pt-4 w-full text-center">
              <span className="text-xs uppercase font-bold">
                Built with Bundlebit
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default DemoBrutalistTheme;
